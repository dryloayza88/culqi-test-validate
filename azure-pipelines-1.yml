# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection
  dockerRegistryServiceConnection: '0581c980-2b52-4ee4-bffe-9082cc365ef7'
  imageRepository: 'dryloayzaculqitestvalidate'
  containerRegistry: 'diegocontainerregistrytest.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '0.0.1'
  imagePullSecret: 'diegocontainerregistrytest4336-auth'

  # Image VM that is gonna use.
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: SonarCloudPrepare
  displayName: SonarCloudPrepare
  jobs:
    - job: SonarCloudPrepare
      displayName: SonarCloudPrepare
      steps:
        - task: SonarCloudPrepare@1
          displayName: 'Preparing SonarCloud analysis'
          inputs:
            SonarCloud: 'diego-sonarcloud'
            organization: '$(SonarOrganization)'
            scannerMode: 'Other'

- stage: Package
  displayName: Maven package
  dependsOn: SonarCloudPrepare
  jobs:
  - job: Package
    displayName: Maven Package
    steps:
      # Maven package task
    - task: Maven@3
      displayName: 'mvn package goal'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        mavenVersionOption: 'Default'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        sqMavenPluginVersionChoice: 'latest'
        codeCoverageToolOption: 'JaCoCo'
        testResultsFiles: '**/TEST-*.xml'
        goals: 'package'

    - task: PublishTestResults@2
      displayName: Publish test
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        testRunTitle: 'Test Results'
        failTaskOnFailedTests: true
    - task: PublishCodeCoverageResults@1
      displayName: Publish coverage
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/jacoco.xml'
        failIfCoverageEmpty: false

- stage: SonarCloudPublish
  displayName: SonarCloudPublish
  dependsOn: Package

  jobs:
  - job: SonarCloudPublish
    displayName: SonarCloudPublish
    steps:
    - task: SonarCloudPrepare@1
      displayName: 'Preparing SonarCloud analysis'
      inputs:
        SonarCloud: 'diego-sonarcloud'
        organization: '$(SonarOrganization)'
        scannerMode: 'Other'
    - task: SonarCloudPublish@1
      displayName: 'Publishing SonarCloud quality results'
      inputs:
        pollingTimeoutSec: '300'

- stage: Build
  displayName: Build stage
  dependsOn: SonarCloudPublish

  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      displayName: Build and push an image to azure container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dryloayza88culqitestvalidate.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'dryloayza88culqitestvalidate.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: default

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
          
          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
