# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  containerRegistryServiceConnection: diego-test
  imageRepository: dryloayza/culqi-test-validate
  tag: 1.0.0

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    mavenAuthenticateFeed: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'diego-sonarcloud'
    organization: '$(SonarOrganization)'
    scannerMode: 'MSBuild'
    projectKey: '$(SonarProjectKey)'
    projectName: '$(SonarProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
      sonar.exclusions=**/wwwroot/lib/**/*

- task: Maven@3
  displayName: 'Execute Maven goal'
  inputs:
    mavenPomFile: 'pom.xml'
    options: '-Dmaven.test.failure.ignore=true'
    mavenOptions: '-Xmx3072m'
    mavenVersionOption: 'Default'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: 'latest'
    codeCoverageToolOption: 'JaCoCo'
    testResultsFiles: '**/TEST-*.xml'
    goals: 'verify'

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud code analysis'

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud quality gate results'

- task: Docker@2
  displayName: dockerLogin
  inputs:
    command: login
    containerRegistry: $(containerRegistryServiceConnection)

- task: Docker@2
  displayName: dockerBuild
  inputs:
    repository: $(imageRepository)
    command: build
    Dockerfile: Dockerfile
    tags: |
      $(tag)

- task: Docker@2
  displayName: dockerPush
  inputs:
    command: push
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)